{"version":3,"sources":["GoodsList.tsx","api/goods.ts","Components/Loader/Loader.tsx","Components/Alert/Alert.tsx","App.tsx","index.tsx"],"names":["GoodsList","goods","Card","style","width","ListGroup","as","numbered","map","good","Item","color","name","id","getAll","fetch","then","response","ok","headers","get","includes","json","Promise","reject","Error","get5First","a","allGoods","sortedGoods","sort","prevGood","currentGood","localeCompare","slice","getRedGoods","filter","Loader","className","AlertMessage","error","useState","show","setShow","Alert","variant","onClose","dismissible","Heading","Button","onClick","App","goodsList","setGoodsList","isLoading","setIsLoading","errorMessage","setErrorMessage","handleGetGoods","getGood","message","String","ButtonGroup","type","ReactDOM","render","document","getElementById"],"mappings":"6SASaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAAtB,SACE,cAACC,EAAA,EAAD,CAAWC,GAAG,KAAKC,UAAQ,EAA3B,SACGN,EAAMO,KAAI,SAACC,GAAD,OACT,cAACJ,EAAA,EAAUK,KAAX,CACEJ,GAAG,KAEH,UAAQ,OACRH,MAAO,CAAEQ,MAAOF,EAAKE,OAJvB,SAMGF,EAAKG,MAJDH,EAAKI,YCVb,SAASC,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAa,IAAD,EAChB,OAAKA,EAASC,GAIV,UAACD,EAASE,QAAQC,IAAI,uBAAtB,OAAC,EAAsCC,SAAS,oBAI7CJ,EAASK,OAHPC,QAAQC,OAAO,IAAIC,MAAM,6BAJzBF,QAAQC,OAAO,IAAIC,MAAM,4BAWjC,IAAMC,EAAS,uCAAG,8BAAAC,EAAA,sEACAb,IADA,cACjBc,EADiB,OAEjBC,EAAcD,EAASE,MAAK,SAACC,EAAUC,GAAX,OAChCD,EAASnB,KAAKqB,cAAcD,EAAYpB,SAHnB,kBAKhBiB,EAAYK,MAAM,EAAG,IALL,2CAAH,qDAQTC,EAAW,uCAAG,4BAAAR,EAAA,sEACFb,IADE,cACnBc,EADmB,yBAGlBA,EAASQ,QAAO,SAAA3B,GAAI,MAAmB,QAAfA,EAAKE,UAHX,2CAAH,qDC1BX0B,G,MAAS,kBACpB,qBAAKC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wB,QCINC,EAAgC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC9C,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OAAID,EAEA,eAACE,EAAA,EAAD,CAAOC,QAAQ,SAASC,QAAS,kBAAMH,GAAQ,IAAQI,aAAW,EAAlE,UACE,cAACH,EAAA,EAAMI,QAAP,yCACA,4BACGR,OAMF,cAACS,EAAA,EAAD,CAAQC,QAAS,kBAAMP,GAAQ,IAA/B,yBCLF,IAAMQ,EAAgB,WAC3B,MAAkCV,mBAAiB,IAAnD,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAkCZ,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAAwCd,mBAAS,IAAjD,mBAAOe,EAAP,KAAqBC,EAArB,KAEMC,EAAc,uCAAG,WAAOC,GAAP,eAAAhC,EAAA,6DACrB4B,GAAa,GADQ,kBAICI,IAJD,OAIb1D,EAJa,OAMnBoD,EAAapD,GANM,gDAQnBwD,GAnBmBjB,EAmBa,EAAD,cAlBXf,MACpBe,EAAMoB,QACNC,OAAOrB,IAQY,yBAUnBe,GAAa,GAVM,+CAXzB,IAAyBf,IAWA,0BAAH,sDAcpB,OACE,sBAAKF,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,mCAIA,eAACwB,EAAA,EAAD,WACE,cAACb,EAAA,EAAD,CACEJ,QAAQ,YACRK,QAAS,kBAAMQ,EAAe5C,IAC9BiD,KAAK,SACL,UAAQ,aAJV,4BASA,cAACd,EAAA,EAAD,CACEJ,QAAQ,UACRK,QAAS,kBAAMQ,EAAehC,IAC9BqC,KAAK,SACL,UAAQ,oBAJV,gCASA,cAACd,EAAA,EAAD,CACEJ,QAAQ,SACRK,QAAS,kBAAMQ,EAAevB,IAC9B4B,KAAK,SACL,UAAQ,aAJV,+BAUAT,EAA8C,cAAC,EAAD,IAAlC,cAAC,EAAD,CAAWrD,MAAOmD,IAC/BI,GAAgB,cAAC,EAAD,CAAchB,MAAOgB,QCrE5CQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.56a292c2.chunk.js","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <Card style={{ width: '100%' }}>\n    <ListGroup as=\"ol\" numbered>\n      {goods.map((good) => (\n        <ListGroup.Item\n          as=\"li\"\n          key={good.id}\n          data-cy=\"good\"\n          style={{ color: good.color }}\n        >\n          {good.name}\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  </Card>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(new Error('Server dont response'));\n      }\n\n      if (!response.headers.get('content-type')?.includes('application/json')) {\n        return Promise.reject(new Error('Requested file not found'));\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = async (): Promise<Good[]> => {\n  const allGoods = await getAll();\n  const sortedGoods = allGoods.sort((prevGood, currentGood) => (\n    prevGood.name.localeCompare(currentGood.name)));\n\n  return sortedGoods.slice(0, 5);\n};\n\nexport const getRedGoods = async () => {\n  const allGoods = await getAll();\n\n  return allGoods.filter(good => good.color === 'red');\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\n\ntype Props = {\n  error: string,\n};\n\nexport const AlertMessage: React.FC<Props> = ({ error }) => {\n  const [show, setShow] = useState(true);\n\n  if (show) {\n    return (\n      <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\n        <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n        <p>\n          {error}\n        </p>\n      </Alert>\n    );\n  }\n\n  return <Button onClick={() => setShow(true)}>Show Alert</Button>;\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { GoodsList } from './GoodsList';\nimport { Good } from './types/Good';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\nimport { Loader } from './Components/Loader';\nimport { AlertMessage } from './Components/Alert/Alert';\n\nfunction getErrorMessage(error: unknown) {\n  return error instanceof Error\n    ? error.message\n    : String(error);\n}\n\nexport const App: React.FC = () => {\n  const [goodsList, setGoodsList] = useState<Good[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleGetGoods = async (getGood: () => Promise<Good[]>) => {\n    setIsLoading(true);\n\n    try {\n      const goods = await getGood();\n\n      setGoodsList(goods);\n    } catch (error) {\n      setErrorMessage(getErrorMessage(error));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App__title\">\n        Dynamic list of Goods\n      </h1>\n\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={() => handleGetGoods(getAll)}\n          type=\"button\"\n          data-cy=\"all-button\"\n        >\n          Load all goods\n        </Button>\n\n        <Button\n          variant=\"warning\"\n          onClick={() => handleGetGoods(get5First)}\n          type=\"button\"\n          data-cy=\"first-five-button\"\n        >\n          Load 5 first goods\n        </Button>\n\n        <Button\n          variant=\"danger\"\n          onClick={() => handleGetGoods(getRedGoods)}\n          type=\"button\"\n          data-cy=\"red-button\"\n        >\n          Load red goods\n        </Button>\n      </ButtonGroup>\n\n      {!isLoading ? <GoodsList goods={goodsList} /> : <Loader />}\n      {errorMessage && <AlertMessage error={errorMessage} />}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}